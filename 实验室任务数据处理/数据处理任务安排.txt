数据样例：
18 Jogging 102271561469000 -13.53 16.89 -6.4
18 Jogging 102271641608000 -5.75 16.89 -0.46
18 Jogging 102271681617000 -2.18 16.32 11.07
18 Jogging 3.36
18 Downstairs 103260201636000 -4.44 7.06 1.95
18 Downstairs 103260241614000 -3.87 7.55 3.3
18 Downstairs 103260321693000 -4.06 8.08 4.79
18 Downstairs 103260365577000 -6.32 8.66 4.94
18 Downstairs 103260403083000 -5.37 11.22 3.06
18 Downstairs 103260443305000 -5.79 9.92 2.53
6 Walking 0 0 0 3.214402

处理一：
将数据中所有的行信息有问题的那行信息删除，如样例中第四条数据
这一行数据只有三个元素，而其他行都有六个元素，所以删除第四条即可
再如最后一行第三个信息明显有问题所以该行也是问题行，删除即可
其他问题自己去找
将全部数据处理完之后，每行单个元素以逗号为分隔，写入文件test1
test1中样例：
6,Walking,23445542281000,-0.72,9.62,0.14982383,
6,Walking,23445592299000,-4.02,11.03,3.445948,
6,Walking,23470662276000,0.95,14.71,3.636633,
......

处理二：
将test1数据中所有动作的数目统计出来，将动作数目打印到屏幕，
后将动作数目变为100的倍数，多余的删除，
比如你统计出Jopping地数量为3021次
那么打印出3021后只往文件写入3000条，写入文件test2

处理三：
将test2中数据读出，每行只取后三列，以空格隔开，写入文件test3
test3样例：
-0.72 9.62 0.14982383 
-4.02 11.03 3.445948 
0.95 14.71 3.636633 
......

处理四：
将test3中数据读出，每行的数据自己的元素用空格隔开，行与行的数据用逗号隔开
每20个一行写入文件finally中，保证每行不会出现不够或者多出来的情况
finally中一行的样例：
-0.72 9.62 0.14982383 ,-4.02 11.03 3.445948 ,0.95 14.71 3.636633 ,-3.57 5.75 -5.407278 ,-5.28 8.85 -9.615966 ,-1.14 15.02 -3.8681788 ,7.86 11.22 -1.879608 ,6.28 4.9 -2.3018389 ,0.95 7.06 -3.445948 ,-1.61 9.7 0.23154591 ,6.44 12.18 -0.7627395 ,5.83 12.07 -0.53119355 ,7.21 12.41 0.3405087 ,6.17 12.53 -6.701211 ,-1.08 17.54 -6.701211 ,-1.69 16.78 3.214402 ,-2.3 8.12 -3.486809 ,-2.91 0 -4.7535014 ,-2.91 0 -4.7535014 ,-4.44 1.84 -2.8330324 ,0.38 10.08 7.668256 ,14.48 16.97 5.7886477 ,-0.99 0.08 -2.1383946 ,-2.91 9.08 0.08172209 ,3.45 13.18 -2.5606253 ,-4.82 6.24 -7.8861814 ,-2.72 12.41 -3.759216 ,6.05 12.95 -3.5276701 ,6.89 5.9 -0.42223078 ,1.31 7.21 -2.8738933 ,-1.42 9 -0.5720546 ,4.6 11.5 -1.3756552 ,6.4 11.5 -0.9942854 ,7.31 12.15 0.7627395 ,6.36 12.03 2.6423476 ,0.95 16.89 -2.9147544 ,-2.75 19.46 -1.0760075 ,1.12 10.99 -3.9090397 ,1.95 8.92 -2.8738933 ,-2.22 3.87 -3.636633 ,-3.6 -0.38 -5.366417 ,-4.71 4.63 -2.8330324 ,7.46 14.94 14.137921 ,9.77 12.34 3.445948 ,0 2.11 -4.5900574 ,0.38 17.27 1.0351465 ,-3.06 6.09 -4.2904096 ,-6.17 9.28 -6.5513873 ,0.53 14.33 -3.336985 ,9.15 9.23 -2.4108016 ,4.48 6.24 -2.8738933 ,-0.57 8.43 0.9942854 ,4.44 11.14 -2.7240696 ,5.98 12.45 0.53119355 ,5.71 12.53 -0.3405087 ,6.7 10.69 3.336985 ,3.15 14.06 -1.7978859 ,-0.76 18.7 -7.5456724 ,-0.19 15.05 1.1168685 ,4.94 8.31 -3.759216 ,-2.22 6.17 -3.8273177 ,-4.02 -0.38 -4.8216033 ,-4.63 2.96 -3.405087 ,-0.65 11.41 4.9850473 ,15.24 16.32 6.3198414 ,1.92 -0.34 -3.5957718 ,-1.95 12.76 2.982856 ,0.5 8.73 -6.2108784 ,-7.78 8.69 -7.8589406 ,-1.46 16.21 -3.9771416 ,4.75 5.83 -1.920469 ,-0.19 6.51 -0.46309182 ,2.6 10 -1.7570249 ,7.74 10.53 -1.9477097 ,4.48 13.53 -0.23154591 ,7.67 12.3 1.879608 ,5.24 11.88 1.3075534 ,-0.3 16.44 -5.5162406 ,-1.23 18.96 2.8738933 ,3.15 9.96 -4.5900574 ,-0.76 8.77 -3.0645783 ,-2.56 1.23 -3.8681788 ,-4.56 0.27 -4.140586 ,-2.64 6.17 -1.6889231 ,13.67 18.31 13.211738 ,3.49 6.89 0.50395286 ,-4.1 5.28 -4.0588636 ,4.06 15.51 -1.3075534 ,-3.64 7.4 -8.730643 ,-2.91 11.37 -4.3312707 ,4.67 13.72 -2.9556155 ,6.82 6.47 -1.2258313 ,2.34 7.08 -4.440233 ,-0.5 8.54 1.1441092 ,3.91 10.46 -2.5333846 ,5.28 11.96 0.42223078 ,5.13 11.75 -0.9942854 ,7.82 11.11 2.4925237 ,4.14 13.25 -0.7218784 ,-0.61 16.97 -6.1700177 ,（这是一行的数据）

结束

所检查项目：实现四个处理的代码以及代码生成的四个文件，要求尽量使用pycharm，至少将这个处理任务的全部包括文件以及代码都放到一个文件夹中
有疑问请询问你们的学长或者问我都可以
